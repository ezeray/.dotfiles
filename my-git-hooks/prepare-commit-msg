#!/bin/bash
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# if we're dealing with a commit amend, we keep the same git message
if [[ "${COMMIT_SOURCE}" == *commit* ]]; then
    exit 0
fi


# if the commit was aborted we load the previously written message to avoid
# losing what the developer had previously written

TMP_FILE=~/.tmp_aborted_commit_msg
if [[ -f ${TMP_FILE} ]]; then
    cat ${TMP_FILE} > ${COMMIT_MSG_FILE}
    rm ${TMP_FILE}
    exit 0
fi

original_content=$(cat ${COMMIT_MSG_FILE})
curr_branch=$(git rev-parse --abbrev-ref HEAD)

## if someone passed an -m message we just add the branches
if [[ "${COMMIT_SOURCE}" == *message* ]]; then
    msg_flag=$(cat ${COMMIT_MSG_FILE})
    echo "On branch ${curr_branch}" > ${COMMIT_MSG_FILE}
    echo ${msg_flag} >> ${COMMIT_MSG_FILE}
    exit 0
fi

# if a merge, we just want to specify the branches being merged
if [[ "${COMMIT_SOURCE}" == *merge* ]]; then
    echo "On branch ${curr_branch}" > ${COMMIT_MSG_FILE}
    echo ${original_content} >> ${COMMIT_MSG_FILE}
    exit 0
fi


# get only modified files
add_array=($(git diff --cached --name-only --diff-filter=A | xargs))
mod_array=($(git diff --cached --name-only --diff-filter=M | xargs))
del_array=($(git diff --cached --name-only --diff-filter=D | xargs))
ren_array=($(git diff --cached --name-only --diff-filter=R | xargs))

echo "# Please make sure to comment on the modifications to each file" > ${COMMIT_MSG_FILE}
echo "#" >> ${COMMIT_MSG_FILE}
echo "#" >> ${COMMIT_MSG_FILE}
echo "#" >> ${COMMIT_MSG_FILE}
echo "#On Branch: ${curr_branch}" >> ${COMMIT_MSG_FILE}


if [[ ${#add_array} -gt 0 ]]; then
    # echo "#" >> ${COMMIT_MSG_FILE}
    for f in "${add_array[@]}"; do
        printf "#\tadded - ${f}:\n" >> ${COMMIT_MSG_FILE}
    done
fi

if [[ ${#mod_array} -gt 0 ]]; then
    # echo "#" >> ${COMMIT_MSG_FILE}
    for f in "${mod_array[@]}"; do
        printf "#\tmodified - ${f}:\n" >> ${COMMIT_MSG_FILE}
    done
fi

if [[ ${#ren_array} -gt 0 ]]; then
    # echo "#" >> ${COMMIT_MSG_FILE}
    for f in "${ren_array[@]}"; do
        printf "#\trenamed - ${f}:\n" >> ${COMMIT_MSG_FILE}
    done
fi

if [[ ${#del_array} -gt 0 ]]; then
    # echo "#" >> ${COMMIT_MSG_FILE}
    for f in "${del_array[@]}"; do
        printf "#\tdeleted - ${f}\n" >> ${COMMIT_MSG_FILE}
    done
fi



# /usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
